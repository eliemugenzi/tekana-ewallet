// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "users";

/** Signup request */
export interface RegisterUserRequest {
  fullName: string;
  email: string;
  gender: string;
  nationalId: string;
  password: string;
}

/** Signup response */
export interface RegisterUserResponse {
  status: number;
  message: string;
}

export interface LoginUserRequest {
  email: string;
  password: string;
}

export interface LoginUserResponse {
  status: number;
  message: string;
  token: string;
}

export interface UserData {
  id: number;
  email: string;
  fullName: string;
  nationalId: string;
  gender: string;
}

export interface UserDataList {
  users: UserData[];
}

export interface Empty {
}

/** Validate */
export interface ValidateTokenRequest {
  token: string;
}

export interface ValidateTokenResponse {
  status: number;
  message: string;
  userId: number;
}

export const USERS_PACKAGE_NAME = "users";

export interface UserServiceClient {
  register(request: RegisterUserRequest): Observable<RegisterUserResponse>;

  login(request: LoginUserRequest): Observable<LoginUserResponse>;

  getUsers(request: Empty): Observable<UserDataList>;

  validateToken(request: ValidateTokenRequest): Observable<ValidateTokenResponse>;
}

export interface UserServiceController {
  register(
    request: RegisterUserRequest,
  ): Promise<RegisterUserResponse> | Observable<RegisterUserResponse> | RegisterUserResponse;

  login(request: LoginUserRequest): Promise<LoginUserResponse> | Observable<LoginUserResponse> | LoginUserResponse;

  getUsers(request: Empty): Promise<UserDataList> | Observable<UserDataList> | UserDataList;

  validateToken(
    request: ValidateTokenRequest,
  ): Promise<ValidateTokenResponse> | Observable<ValidateTokenResponse> | ValidateTokenResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["register", "login", "getUsers", "validateToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
