// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: wallet.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Decimal } from "@prisma/client/runtime/library";
import { Observable } from "rxjs";

export const protobufPackage = "wallets";

export interface NewWalletRequest {
  userId: number;
  type: string;
}

export interface NewWalletResponse {
  status: number;
  message: string;
}

export interface FindWalletRequest {
  accountNumber: string;
}

export interface WalletActivityLog {
  transactionId: number;
  action: string;
  amount: Decimal;
}

export interface WalletData {
  id: number;
  accountNumber: string;
  userId: number;
  type: string;
  balance: Decimal;
  activityLogs: WalletActivityLog[];
}

export interface FindWalletResponse {
  status: number;
  message: string;
  data: WalletData | undefined;
}

export interface GetWalletsRequest {
  userId: number;
}

export interface GetWalletsResponse {
  status: number;
  message: string;
  data: WalletData[];
}

export interface DepositMoneyRequest {
  accountNumber: string;
  amount: number;
  transactionId: number;
}

export interface DepositMoneyResponse {
  status: number;
  message: string;
}

export interface WithdrawMoneyRequest {
  accountNumber: string;
  amount: number;
  transactionId: number;
}

export interface WithdrawMoneyResponse {
  status: number;
  message: string;
}

export const WALLETS_PACKAGE_NAME = "wallets";

export interface WalletServiceClient {
  createWallet(request: NewWalletRequest): Observable<NewWalletResponse>;

  findWallet(request: FindWalletRequest): Observable<FindWalletResponse>;

  getWallets(request: GetWalletsRequest): Observable<GetWalletsResponse>;

  depositMoney(request: DepositMoneyRequest): Observable<DepositMoneyResponse>;

  withdrawMoney(request: WithdrawMoneyRequest): Observable<WithdrawMoneyResponse>;
}

export interface WalletServiceController {
  createWallet(
    request: NewWalletRequest,
  ): Promise<NewWalletResponse> | Observable<NewWalletResponse> | NewWalletResponse;

  findWallet(
    request: FindWalletRequest,
  ): Promise<FindWalletResponse> | Observable<FindWalletResponse> | FindWalletResponse;

  getWallets(
    request: GetWalletsRequest,
  ): Promise<GetWalletsResponse> | Observable<GetWalletsResponse> | GetWalletsResponse;

  depositMoney(
    request: DepositMoneyRequest,
  ): Promise<DepositMoneyResponse> | Observable<DepositMoneyResponse> | DepositMoneyResponse;

  withdrawMoney(
    request: WithdrawMoneyRequest,
  ): Promise<WithdrawMoneyResponse> | Observable<WithdrawMoneyResponse> | WithdrawMoneyResponse;
}

export function WalletServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createWallet", "findWallet", "getWallets", "depositMoney", "withdrawMoney"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("WalletService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("WalletService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const WALLET_SERVICE_NAME = "WalletService";
